//                                                                                                 //
// Test data for BigIntegers.pas, generated 07.08.2016 01:40:35                                    //
//                                                                                                 //
// Do not modify the generated data in this file.  Modify the data in the generator source file.   //
// The source file for the generator is BigIntegerTestGenerator.cs, in the Test subdirectory.      //
//                                                                                                 //
// The generator was written in C#, using Microsoft Visual C# 2010 Express                         //
//                                                                                                 //

type
  TTestResultInfo =
  (
    triOk,
    triDivideByZero,
    triArgumentNull,
    triArgumentRange,
    triFormat,
    triOverflow 
  );

  TTestResult = record
    info: TTestResultInfo;
    val: string;
  end;

  TComparisonResult = (crGreater, crGreaterEqual, crEqual, crLessEqual, crLess, crNotEqual);

const
  TestCount   = 64;
  ShiftCount  = 40;
  DoubleCount = 100;

  Arguments: array[0..TestCount - 1] of string =
  (
    '-158571582985157323973932567063203986538' + 
    '4960',                                         // 0
    '-180349654468097385635588541938837152071' + 
    '67',                                           // 1
    '-779879232593610263927748006161',              // 2
    '-82261793876695338192268955270',               // 3
    '-8840587743209014991486176890',                // 4
    '-499680576774082292410113726',                 // 5
    '-7096499840976817344578600',                   // 6
    '-74287305190053403856772',                     // 7
    '-13416290973509623768074',                     // 8
    '-8271324858169862655834',                      // 9
    '-1673271581108184934182',                      // 10
    '-100000',                                      // 11
    '-45808',                                       // 12
    '-10000',                                       // 13
    '-1000',                                        // 14
    '-100',                                         // 15
    '-56',                                          // 16
    '-10',                                          // 17
    '-7',                                           // 18
    '-2',                                           // 19
    '-1',                                           // 20
    '0',                                            // 21
    '1',                                            // 22
    '2',                                            // 23
    '7',                                            // 24
    '10',                                           // 25
    '100',                                          // 26
    '409',                                          // 27
    '818',                                          // 28
    '1000',                                         // 29
    '10000',                                        // 30
    '100000',                                       // 31
    '1000000',                                      // 32
    '4234575746049986044',                          // 33
    '5387241703157997895',                          // 34
    '9223372041149612032',                          // 35
    '172872415652910937156',                        // 36
    '977677435906606235647',                        // 37
    '1673271581108184934182',                       // 38
    '8271324858169862655834',                       // 39
    '13416290973509623768074',                      // 40
    '74287305190053403856772',                      // 41
    '85961827383486510530560',                      // 42
    '7096499840976817344578600',                    // 43
    '499680576774082292410113726',                  // 44
    '1243478184157339114435077574',                 // 45
    '8840587743209014991486176890',                 // 46
    '19807040619342712359383728129',                // 47
    '63733365657267277460012361609',                // 48
    '82261793876695338192268955270',                // 49
    '779879232593610263927748006161',               // 50
    '113110558780721284166510605813',               // 51
    '4847586039315419829807005894255429',           // 52
    '90612345123875509091827560007100099',          // 53
    '85070591730234615847396907784232501249',       // 54
    '85070591730234615847396907784232501250',       // 55
    '680564693277057719623408366969033850880',      // 56
    '1803496544680973856355885419388371520716' + 
    '7',                                            // 57
    '1585715829851573239739325670632039865384' + 
    '960',                                          // 58
    '1234567890123456789012345678901234567890' + 
    '123456789012345678901234567890',               // 59
    '3435973836799999999999999999956631913100' + 
    '57982263970188796520233154296875',             // 60
    '3435973836799999999999999999956631913100' + 
    '5798226397018879652023315429687500000000' + 
    '00000',                                        // 61
    '10000000000000',                               // 62
    '1000000000000000000000000000000000000000' + 
    '000000000000000000'                            // 63
  );

  BitShifts: array[0..ShiftCount - 1] of Integer =
  (
       1,   2,   3,   4,   5,   6,   7,   8,
       9,  10,  11,  12,  13,  14,  15,  20,
      25,  30,  31,  32,  33,  35,  40,  50,
      60,  70,  71,  72,  73,  74,  75,  90,
     100, 110, 159, 160, 161, 162, 163, 164 
  );

  Doubles: array[0..DoubleCount - 1] of Double =
  (
    -6E+20,
    -1E+20,
    -3.51,
    -3.5,
    -3.49,
    -2.51,
    -2.5,
    -2.49,
    -2E-100,
    0,
    7E-08,
    0.0001,
    0.1,
    0.2,
    0.3,
    0.4,
    0.49999999999999,
    0.5,
    0.50000001,
    0.7,
    0.9,
    1,
    1.00000000000001,
    1.1,
    1.49999999999999,
    1.5,
    1.50000000000001,
    1.9999,
    2,
    2.49,
    2.5,
    2.51,
    3,
    3.49,
    3.5,
    3.51,
    4,
    4.1,
    4.2,
    4.4,
    4.5,
    4.6,
    4.9999,
    5,
    6,
    7,
    8,
    9,
    10,
    15,
    22,
    44,
    85,
    128,
    256,
    256.1,
    256.5,
    256.7,
    300,
    876.543210987654,
    645000,
    1000000.5,
    1000000.5,
    1000000.5,
    1048576.1,
    1048576.5,
    10000000000,
    14900000000,
    15000000000,
    15100000000,
    31415920000,
    100000000000,
    1000000000000,
    10000000000000,
    100000000000000,
    1E+15,
    2E+15,
    4E+15,
    4.9E+15,
    8E+15,
    1E+16,
    2E+16,
    4E+16,
    5E+16,
    1E+17,
    1E+18,
    1E+19,
    1.23456789012346E+19,
    1E+20,
    100000000000001,
    100000000000002,
    100000000000004,
    100000000000008,
    100000000000016,
    100000000000032,
    100000000000064,
    100000000000128,
    100000000000256,
    100000000000512,
    1E+80
  );

